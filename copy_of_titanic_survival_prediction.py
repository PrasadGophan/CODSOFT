# -*- coding: utf-8 -*-
"""Copy of TITANIC SURVIVAL PREDICTION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eYoRce61hGVIYaXS6uMPjTuOnzu37LNA

# **Import** **the** **Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# **Data** **collection** **and** **Processing**"""

# load the data set into the pandas libabry
titanic_data= pd.read_csv('/content/train.csv')

# prinit first five rows of our dataset
titanic_data.head()

# total number of rows and coloumns
titanic_data.shape

# getting information about data
titanic_data.info()

# check the number of missing values in each coloumn
titanic_data.isnull().sum()

"""# **Handling the missing values**"""

# drop the cabin coloumn from dataset
titanic_data= titanic_data.drop(columns= ('Cabin'), axis=1)

# replacing the missing values in the age column with the min values
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace= True)

# replacing the missing values in the embark column with repated value
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace= True)

titanic_data.isnull().sum()

"""# **Data Analysis**"""

titanic_data.describe()

# finfing the numner of pepole surviwed and not surviwed  [0 is for not survived and 1 is for survived]
titanic_data['Survived'].value_counts()

"""# **Data Visulization**"""

# making a count plot column
sns.countplot( data=titanic_data)

# making a count plot for sex column
sns.countplot(x='Sex', data= titanic_data)

# making a count plot for survived column
sns.countplot(x='Survived', data= titanic_data)

titanic_data['Sex'].value_counts()

# number of survivors gender wise
sns.countplot( x='Sex', hue='Survived', data=titanic_data)

# making a count plot for pclass column
sns.countplot(x='Pclass', data= titanic_data)

# making a count plot for sex column
sns.countplot(x='Pclass', hue='Survived', data= titanic_data)

"""# **Catagorical Columns**"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting catagorical cloumns
titanic_data.replace({'Sex':{'male':0,'female':1},'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""# **Seprating targets and features**"""

# drop some columns
X= titanic_data.drop(columns= ['PassengerId','Name','Ticket','Survived'], axis=1)
Y= titanic_data['Survived']

print(X)

print(Y)

"""# **Splitting the data into Training data and Testing data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape,X_train.shape, X_test.shape)

"""# **Model Training**

**Logistic Regression**
"""

model=LogisticRegression()

model.fit(X_train,Y_train)

"""# **Model Evaluation**"""

# accuracy prediction on training data
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('accuracy score of training data:',training_data_accuracy)

# accuracy prediction on test data
X_test_prediction = model.predict(X_test)

print(X_test_prediction)

training_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('accuracy score of training data:',training_data_accuracy)



